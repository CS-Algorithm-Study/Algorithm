#include<iostream>
#include<vector>
#include<queue>
#include<cstring>
#include<algorithm>
using namespace std;

int n, m, cnt,ans;
int arr[300][300],visited[300][300];
int dy[4] = { -1,0,0,1 }, dx[4] = { 0,-1,1,0 };

void bfs(int y, int x) {
	queue<pair<int, int>>qu;
	qu.push({ y,x });
	visited[y][x] = 1;
	while (!qu.empty()) {
		pair<int, int>cur = qu.front();
		qu.pop();

		for (int i = 0; i < 4; i++) {
			//
			int ny = cur.first + dy[i], nx = cur.second + dx[i];
			if (ny < 0 || ny >= n || nx < 0 || nx >= m)continue;
			//
			if (arr[ny][nx] == 0)
				visited[cur.first][cur.second]++;

			else if (arr[ny][nx]&&!visited[ny][nx]) {
				qu.push({ ny,nx });
				visited[ny][nx] = 1;
			}
		}
	}
}

void solve() {
	for (int i = 1; i < n - 1; i++) {
		for (int j = 0; j < m ; j++) {
			if (visited[i][j]) {
				visited[i][j]--;
				if (visited[i][j] > arr[i][j])
					arr[i][j] = 0;
				else
					arr[i][j] -= visited[i][j];
				visited[i][j] = 0;
			}
		}
	}
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &arr[i][j]);
		}
	}

	while(1) {
		cnt = 0;
		bool check = false;
		for (int i = 1; (!check&&i < n-1); i++) {
			for (int j = 0; j < m; j++) {
				if (arr[i][j] && !visited[i][j]) {
					bfs(i, j);
					cnt++;
					if (cnt == 2) {
						check = true;
						break;
					}
				}
			}
		}

		if (cnt == 0) {
			printf("0");
			break;
		}

		if (check) {
			printf("%d", ans);
			break;
		}
		solve();
		ans++;
	}
}
